// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          Bytes?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts     Account[]
  createdWords Word[]    @relation("createdByUser")
  updatedWords Word[]    @relation("updatedByUser")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String? @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Word {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  word          String
  partsOfSpeech String
  phonetics     String
  meaning       String
  example       String
  image         Bytes?
  categories    String[]
  level         String
  synonyms      String[] @default([])
  antonyms      String[] @default([])

  // created
  createdAt   DateTime @default(now())
  createdBy   User?    @relation("createdByUser", fields: [createdById], references: [id])
  createdById String?  @db.ObjectId
  // updated
  updatedAt   DateTime @updatedAt
  updatedBy   User?    @relation("updatedByUser", fields: [updatedById], references: [id])
  updatedById String?  @db.ObjectId
}
